import React, { useEffect, useState } from "react";
import axios from "axios";
import QuestionCard from "./QuestionCard";
import { useAuth } from "./Auth/AuthContext";
import { useNavigate } from "react-router-dom";


function Malware() {
  const [questions, setQuestions] = useState([]);
  const [currentIndex, setCurrentIndex] = useState(0);
  const [selectedOption, setSelectedOption] = useState("");
  const [timeLeft, setTimeLeft] = useState(3);
  const [submitted, setSubmitted] = useState(false);
  const [answers, setAnswers] = useState([]);
  const {user} = useAuth();
  const navigate = useNavigate();



  useEffect(() => {
    if (currentIndex >= questions.length && questions.length > 0) {
      navigate('/malware-result');  // Navigate when done
    }
  }, [currentIndex, questions.length, navigate]);

  //  Fetch quiz questions
  useEffect(() => {
    const fetchQuestions = async () => {
      try {
        const res = await axios.get("/api/user/malware");
        const shuffled = res.data
          .map((q) => ({
            ...q,
            correctAnswer: q.answer || "",
          }))
          .sort(() => Math.random() - 0.5);
        setQuestions(shuffled);
      } catch (err) {
        console.error("Error fetching questions:", err);
      }
    };

    fetchQuestions();
  }, []);

  //  Timer logic
  useEffect(() => {
    if (submitted || !questions.length || currentIndex >= questions.length) return;

    if (timeLeft === 0) {
      handleSubmit();
      return;
    }

    const timer = setTimeout(() => setTimeLeft((t) => t - 1), 1000);
    return () => clearTimeout(timer);
  }, [timeLeft, submitted, questions, currentIndex]);

  //  Handle submission of one question
  const handleSubmit = () => {
    const currentQuestion = questions[currentIndex];

    setSubmitted(true);

    setAnswers((prev) => [
      ...prev,
      {
        question: currentQuestion.question,
        answer: selectedOption || null,
        correctAnswer: currentQuestion.correctAnswer,
        correct: false,
        score: selectedOption ? currentQuestion.score || 1 : 0,
      },
    ]);

    setTimeout(() => {
      setSubmitted(false);
      setSelectedOption("");
      setTimeLeft(3);
      setCurrentIndex((prev) => prev + 1);
    }, 1000);
  };

  // Submit full result to backend
  useEffect(() => {
    if (questions.length && answers.length === questions.length) {
      const userResult = {
        nameUser: user.nameUser,
        email: user.email,
        nameCategory: "malware",
        questions: answers,
      };

      axios
        .post("/api/user/playing-quiz", userResult)
        .then(() => console.log("Results saved successfully"))
        .catch((err) => console.error("Error saving results:", err));
    }
  }, [answers, questions.length, user]);

  if (!questions.length) return <div>Loading Questions...</div>;
  if (currentIndex >= questions.length)
    return (
      <div className="text-center font-bold text-xl">
         Quiz Completed!
      </div>
    );

  const currentQuestion = questions[currentIndex];

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-100 to-purple-600 flex items-center justify-center px-4">
      <div className="w-full max-w-md bg-purple-100 p-8 rounded-2xl shadow-2xl relative">
        {/* Timer */}
        <div className="absolute top-4 right-4 flex items-center space-x-2 animate-pulse">
          <span className="text-2xl text-red-600">❤️</span>
          <span className="text-lg font-bold text-red-600">{timeLeft}s</span>
        </div>

        <QuestionCard
          question={currentQuestion.question}
          option={currentQuestion.option}
          selectedOption={selectedOption}
          onSelectOption={setSelectedOption}
          disabled={submitted}
        />

        {/* Next button */}
        {selectedOption && !submitted && (
          <button
            onClick={handleSubmit}
            className="mt-6 w-full bg-green-600 text-white font-semibold py-2 rounded-full hover:bg-green-700 transition"
          >
            Next
          </button>
        )}

        {submitted && (
          <p className="mt-4 text-center text-green-700 font-semibold">
            Answer Submitted!
          </p>
        )}
      </div>
    </div>
  );
}

export default Malware;
