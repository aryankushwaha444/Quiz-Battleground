import React, { useEffect, useState } from "react";
import axios from "axios";
import QuestionCard from "./QuestionCard";
import { useAuth } from "./Auth/AuthContext";
import { useNavigate } from "react-router-dom";

function Malware() {
  const [questions, setQuestions] = useState([]);
  const [currentIndex, setCurrentIndex] = useState(0);
  const [selectedOption, setSelectedOption] = useState("");
  const [category, setCategory] = useState({ nameCategory: "" });
  const [timeLeft, setTimeLeft] = useState(3);
  const [submitted, setSubmitted] = useState(false);
  const [answers, setAnswers] = useState([]);
  const { user } = useAuth();
  const navigate = useNavigate();

  

  // üö´ Block refresh and backspace
  useEffect(() => {
    const handleKeyDown = (e) => {
      if (e.key === "F5" || (e.ctrlKey && e.key.toLowerCase() === "r")) {
        e.preventDefault();
        alert("‚õî Refreshing is disabled during the quiz!");
      }
      if (
        e.key === "Backspace" &&
        !["INPUT", "TEXTAREA"].includes(document.activeElement.tagName)
      ) {
        e.preventDefault();
        alert("‚õî Going back is disabled during the quiz!");
      }
    };

    const handlePopState = () => {
      window.history.pushState(null, "", window.location.href);
      alert("‚õî Going back is disabled during the quiz!");
    };

    window.addEventListener("keydown", handleKeyDown);
    window.addEventListener("popstate", handlePopState);
    window.history.pushState(null, "", window.location.href);

    return () => {
      window.removeEventListener("keydown", handleKeyDown);
      window.removeEventListener("popstate", handlePopState);
    };
  }, []);

  // ‚úÖ Redirect if quiz already completed
  useEffect(() => {
    const isQuizCompleted = localStorage.getItem("malware_quiz_done");
    if (isQuizCompleted === "true") {
      navigate("/malware-result");
    }
  }, [navigate]);

  // ‚¨áÔ∏è Load quiz state
  useEffect(() => {
    const storedQuestions = localStorage.getItem("malware_questions");
    const storedIndex = localStorage.getItem("malware_currentIndex");
    const storedAnswers = localStorage.getItem("malware_answers");
    const storedTimeLeft = localStorage.getItem("malware_timeLeft");

    if (storedQuestions) {
      setQuestions(JSON.parse(storedQuestions));
      setCurrentIndex(parseInt(storedIndex) || 0);
      setAnswers(JSON.parse(storedAnswers) || []);
      setTimeLeft(parseInt(storedTimeLeft) || 3);
      setCategory({ nameCategory: "Malware" });
    } else {
      fetchQuestions();
    }
  }, []);

  const fetchQuestions = async () => {
    try {
      const res = await axios.get("/api/user/malware");
      const shuffled = res.data
        .map((q) => ({
          ...q,
          correctAnswer: q.answer || "",
        }))
        .sort(() => Math.random() - 0.5);
      setQuestions(shuffled);
      setCategory({ nameCategory: "Malware" });
    } catch (err) {
      console.error("Error fetching questions:", err);
    }
  };

  // üíæ Save quiz state
  useEffect(() => {
    if (questions.length > 0) {
      localStorage.setItem("malware_questions", JSON.stringify(questions));
      localStorage.setItem("malware_currentIndex", currentIndex);
      localStorage.setItem("malware_answers", JSON.stringify(answers));
      localStorage.setItem("malware_timeLeft", timeLeft);
    }
  }, [questions, currentIndex, answers, timeLeft]);

  // ‚è≥ Timer logic
  useEffect(() => {
    if (submitted || !questions.length || currentIndex >= questions.length) return;

    if (timeLeft === 0) {
      handleSubmit();
      return;
    }

    const timer = setTimeout(() => setTimeLeft((t) => t - 1), 1000);
    return () => clearTimeout(timer);
  }, [timeLeft, submitted, questions, currentIndex]);

  // ‚úÖ Handle answer submission
  const handleSubmit = () => {
    const currentQuestion = questions[currentIndex];
    const isCorrect = selectedOption === currentQuestion.correctAnswer;

    setSubmitted(true);

    setAnswers((prev) => [
      ...prev,
      {
        question: currentQuestion.question,
        answer: selectedOption || null,
        correctAnswer: currentQuestion.correctAnswer,
        correct: isCorrect,
        score: isCorrect ? currentQuestion.score || 1 : 0,
      },
    ]);

    setTimeout(() => {
      setSubmitted(false);
      setSelectedOption("");
      setTimeLeft(3);
      setCurrentIndex((prev) => prev + 1);
    }, 1000);
  };

  // ‚úÖ Final submission
  useEffect(() => {
    if (questions.length && answers.length === questions.length) {
      const userResult = {
        nameUser: user.nameUser,
        email: user.email,
        nameCategory: category.nameCategory,
        questions: answers,
      };

      axios
        .post("/api/user/playing-quiz", userResult)
        .then(() => {
          console.log("Results saved successfully");
          localStorage.setItem("malware_quiz_done", "true");
          localStorage.removeItem("malware_questions");
          localStorage.removeItem("malware_currentIndex");
          localStorage.removeItem("malware_answers");
          localStorage.removeItem("malware_timeLeft");
          navigate("/malware-result");
        })
        .catch((err) => console.error("Error saving results:", err));
    }
  }, [answers, questions.length, user, category.nameCategory, navigate]);

  if (!questions.length) return <div>Loading Questions...</div>;

  if (currentIndex >= questions.length) {
    return (
      <div className="text-center font-bold text-xl">
        Quiz Completed!
      </div>
    );
  }

  const currentQuestion = questions[currentIndex];

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-100 to-purple-600 flex items-center justify-center px-4">
      <div className="w-full max-w-md bg-purple-100 p-8 rounded-2xl shadow-2xl relative">
        {/* Timer */}
        <div className="absolute top-4 right-4 flex items-center space-x-2 animate-pulse">
          <span className="text-2xl text-red-600">‚è≥</span>
          <span className="text-lg font-bold text-red-600">{timeLeft}s</span>
        </div>

        <QuestionCard
          question={currentQuestion.question}
          option={currentQuestion.option}
          selectedOption={selectedOption}
          onSelectOption={setSelectedOption}
          disabled={submitted}
        />

        {selectedOption && !submitted && (
          <button
            onClick={handleSubmit}
            className="mt-6 w-full bg-green-600 text-white font-semibold py-2 rounded-full hover:bg-green-700 transition"
          >
            Next
          </button>
        )}

        {submitted && (
          <p className="mt-4 text-center text-green-700 font-semibold">
            ‚úÖ Answer Submitted!
          </p>
        )}
      </div>
    </div>
  );
}

export default Malware;
